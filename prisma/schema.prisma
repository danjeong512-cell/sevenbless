// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?

  // App settings
  locale             String          @default("ko")
  tone               String          @default("warm")
  channel            String          @default("email") // email | sms
  timezone           String          @default("America/Vancouver")
  sendAt             String          @default("07:00") // HH:mm
  phone              String?
  retainEventText    Boolean         @default(false)

  accounts           Account[]
  sessions           Session[]
  dailySignals       DailySignal[]
  deliveryLogs       DeliveryLog[]

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String   @id @default(cuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier         String
  token              String   @unique
  expires            DateTime

  @@unique([identifier, token])
}

model DailySignal {
  id           String    @id @default(cuid())
  userId       String
  date         DateTime  // local date stored as DateTime
  eventCount   Int
  totalHours   Float
  backToBack   Boolean
  keywords     String    @default("") // comma-separated keywords
  busyScore    Int
  focusScore   Int
  energyHint   String
  tags         String    @default("") // comma-separated tags
  generatedAt  DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@unique([userId, date])
}

model DeliveryLog {
  id           String    @id @default(cuid())
  userId       String
  date         DateTime
  channel      String
  status       String // sent | failed | retrying
  attempts     Int      @default(0)
  error        String?
  nextAttemptAt DateTime?
  message      String?
  tags         String    @default("")

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())

  @@index([userId, date])
}
